// Generated by CoffeeScript 1.6.3
(function() {
  var boot, compileApp, compileApplication, compileChar, compileExpression, compileLiteral, compileNil, compileNumber, compileString, compileSymbol, compileVec, compiled, fs, grammar, isNumber, isPrimOp, isSymbol, numericBinOp, parser, pegjs, primops, prog, test, _;

  pegjs = require('pegjs');

  fs = require('fs');

  _ = require('underscore');

  console.log('reading grammar');

  grammar = fs.readFileSync('grammar', 'utf8');

  console.log('grammar read');

  console.log('generating parser');

  parser = pegjs.buildParser(grammar);

  isSymbol = function(_arg) {
    var type, _;
    type = _arg[0], _ = _arg[1];
    return type === 'symbol';
  };

  isNumber = function(_arg) {
    var type, _;
    type = _arg[0], _ = _arg[1];
    return type === 'number';
  };

  compileNumber = function(_arg) {
    var type, val;
    type = _arg[0], val = _arg[1];
    return val;
  };

  compileSymbol = function(symbol) {
    var js;
    js = symbol.replace('?', '_QUOT_').replace('-', '_DASH_').replace('>', '_GT_').replace('<', '_LT_').replace('=', '_EQ_').replace('!', '_BANG_').replace('+', '_PLUS_').replace('/', '_SLASH_').replace('*', '_STAR_');
    return js;
  };

  compileString = function(string) {
    return '"' + string + '"';
  };

  compileChar = function(char) {
    return '\'' + char + '\'';
  };

  compileNil = function() {
    return 'nil';
  };

  compileVec = function(elements) {
    return '[' + _.map(elements, compileExpression).join(', ') + ']';
  };

  compileLiteral = function(_arg) {
    var literal, type;
    type = _arg[0], literal = _arg[1];
    switch (type) {
      case 'vec':
        return compileVec(literal);
      case 'number':
        return compileNumber(literal);
      case 'symbol':
        return compileSymbol(literal);
      case 'string':
        return compileString(literal);
      case 'char':
        return compileChar(literal);
      case 'nil':
        return compileNil();
      default:
        throw Error("unrecognized literal");
    }
  };

  numericBinOp = function(op) {
    return {
      symbol: op,
      compile: function(args) {
        if (_.some(args, function(x) {
          return !(isSymbol(x) || isNumber(x));
        })) {
          throw Error('##ERROR ' + op + ' only takes numeric, or symbol args');
        } else {
          switch (args.length) {
            case 0:
              return '0';
            case 1:
              return compileLiteral(args[0]);
            default:
              return '(' + _.map(args, compileLiteral).join(' ' + op + ' ') + ')';
          }
        }
      }
    };
  };

  primops = {
    '+': numericBinOp('+'),
    '-': numericBinOp('-'),
    '/': numericBinOp('/'),
    '*': numericBinOp('*'),
    'def': {
      symbol: 'def',
      compile: function(args) {
        var expr, name, unk, _ref;
        if (!isSymbol(args[0])) {
          throw Error("def cannot be called without a symbol name");
        }
        _ref = args[0], unk = _ref[0], name = _ref[1];
        expr = args[1];
        return 'var ' + compileSymbol(name) + ' = ' + compileExpression(expr) + ';';
      }
    },
    'fn': {
      symbol: 'fn',
      compile: function(args) {
        var body, fargs, jsargs, lastn, rest, x, _ref;
        _ref = args[0], x = _ref[0], fargs = _ref[1];
        console.log(fargs);
        jsargs = _.map(fargs, compileLiteral);
        rest = args.slice(1);
        body = _.map(rest, compileExpression);
        lastn = body.length - 1;
        return 'new boot.Fn(function (' + jsargs.join(', ') + ') {' + body.slice(0, lastn).join(';\n') + 'return ' + body[lastn] + ';}' + ')';
      }
    }
  };

  isPrimOp = function(_arg) {
    var literal, type;
    type = _arg[0], literal = _arg[1];
    switch (type) {
      case 'symbol':
        return _.has(primops, literal);
      default:
        return false;
    }
  };

  compileApplication = function(appl) {
    var args, lit, op, optype;
    op = appl.op;
    optype = op[0], lit = op[1];
    args = appl.args;
    if (isPrimOp(op)) {
      return primops[lit].compile(args);
    } else {
      switch (optype) {
        case 'symbol':
          return compileSymbol(lit) + '.call(' + _.map(args, compileExpression).join(',') + ')';
        case 'application':
          return compileApplication(list);
        default:
          return 'cannot compile... yet';
      }
    }
  };

  compileExpression = function(_arg) {
    var expr, type;
    type = _arg[0], expr = _arg[1];
    switch (type) {
      case "application":
        return compileApplication(expr);
      default:
        return compileLiteral([type, expr]);
    }
  };

  compileApp = function(exprs) {
    return _.map(exprs, compileExpression).join('\n');
  };

  prog = '(def square (fn [x] (* x x)))\
   (square 5)';

  test = function() {
    var parsed;
    parsed = parser.parse(prog);
    return compileApp(parsed);
  };

  compiled = test();

  console.log(compiled);

  console.log('running!');

  boot = require('./boot.js');

  console.log(eval(compiled));

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
